############
1. Viết chương trình C++ cài đặt lại lớp Phân Số, trong đó thuộc tính của lớp Phân Số
được định nghĩa như sau:
● Cài đặt nạp chồng các toán tử cho lớp Phân Số, các toán tử 2 ngôi với cả 2 ngôi đều có
chung kiểu đối tượng Phân Số (lưu ý cần cài đặt tất cả các phương thức tạo lập, hủy có
liên quan để chương trình không bị lỗi):
o Toán tử gán bằng =
o + - * /
o += -= *= /=
o == < > <= >= !=
o ++ -- (cả tiền tố lẫn hậu tố)
o >> << (nhập xuất ra console, xuất theo định dạng tử số / mẫu số)
###########
//File.h
#pragma once
#include <iostream>
#include <math.h>

using namespace std;
class phanso
{
private:
	int* tu;
	int* mau;
public: 
	phanso();
	phanso(int, int);
	phanso(const phanso& );
	void Rutgon();
	void Xuat();

	phanso& operator=(const phanso& );

	phanso operator+(const phanso&);
	phanso operator-(const phanso&);
	phanso operator*(const phanso&);
	phanso operator/(const phanso&);
	
	phanso& operator+=(const phanso&);
	phanso& operator-=(const phanso&);
	phanso& operator*=(const phanso&);
	phanso& operator/=(const phanso&);

	bool operator==(const phanso&);
	bool operator<(const phanso&);
	bool operator>(const phanso&);
	bool operator<=(const phanso&);
	bool operator>=(const phanso&);
	bool operator!=(const phanso&);

	//tien to
	phanso& operator++();
	phanso& operator--();
    
	//hau to
	phanso operator++(int);
	phanso operator--(int);

	friend istream& operator>>(istream& is, phanso& ps);
	friend ostream& operator<<(ostream& os, const phanso& ps);


	
	//void Xuat();
};

//File.cpp
#include "phanso.h"

phanso::phanso()
{
	this->tu = new int(0);
	this->mau = new int(1);
}

phanso::phanso(int tu, int mau)
{
	this->tu = new int(tu);
	this->mau = new int(mau);
}

phanso::phanso(const phanso& a)
{
	this->tu = new int(*a.tu);
	this->mau = new int(*a.mau);
}

void phanso::Rutgon()
{
	int a = *this->tu;
	int b = *this->mau;
	int ucln;
	if (a == 0 && b == 0)
	{
		ucln = a + b;
	}
	else
	{
		a = abs(a);
		b = abs(b);
		while (a != b)
		{
			if (a > b)
			{
				a -= b;
			}
			else
			{
				b -= a;
			}
		}
		ucln = a;
	}
	*this->tu /= ucln;
	*this->mau /= ucln;
	
}

phanso& phanso::operator=(const phanso& ps)
{
	if (this == &ps)
	{
		return *this;
	}
	*this->tu = *ps.tu;
	*this->mau = *ps.mau;
	return *this;

}

phanso phanso::operator+(const phanso& a)
{
	phanso kq;
	*kq.tu = *this->tu * *a.mau + *this->mau * *a.tu;
	*kq.mau = *this->mau * *a.mau;
	return kq;
}
phanso phanso::operator-(const phanso& a)
{ 
	phanso kq;
	*kq.tu = *this->tu * *a.mau - *this->mau * *a.tu;
	*kq.mau = *this->mau * *a.mau;
	return kq;
}
phanso phanso::operator*(const phanso& a)
{
	phanso kq;
	*kq.tu = *this->tu * *a.tu;
	*kq.mau = *this->mau * *a.mau;
	return kq;
}
phanso phanso::operator/(const phanso& a)
{
	phanso kq;
	*kq.tu = *this->tu * *a.mau;
	*kq.mau = *this->mau * *a.tu;
	return kq;
}

phanso& phanso::operator+=(const phanso& a)
{ 
	*this->tu = *this->tu * *a.mau + *this->mau * *a.tu;
	*this->mau = *this->mau * *a.mau;
	return *this;
}
phanso& phanso::operator-=(const phanso& a)
{
	*this->tu = *this->tu * *a.mau - *this->mau * *a.tu;
	*this->mau = *this->mau * *a.mau;
	return *this;
}
phanso& phanso::operator*=(const phanso& a)
{
	*this->tu = *this->tu *  *a.tu;
	*this->mau = *this->mau * *a.mau;
	return *this;
}
phanso& phanso::operator/=(const phanso& a)
{
	*this->tu = *this->tu * *a.mau;
	*this->mau = *this->mau * *a.tu;
	return *this;
}

bool phanso::operator==(const phanso& a)
{
	if (*this->tu** a.mau == *this->mau * *a.tu)
		return true;
	else
		return false;
}
bool phanso::operator!=(const phanso& a)
{
	if (*this->tu** a.mau != *this->mau * *a.tu)
		return true;
	else
		return false;
}

bool phanso::operator>(const phanso& a)
{
	phanso x = *this - a;
	if (*x.tu < 0 && *x.mau < 0 || *x.tu > 0 && *x.mau > 0)
		return true;
	else
	{
		return false;
	}
}
bool phanso::operator<(const phanso& a)
{
	phanso x = *this - a;
	if (*x.tu < 0 && *x.mau > 0 || *x.tu < 0 && *x.mau > 0)
		return true;
	else
	{
		return false;
	}
}
bool phanso::operator>=(const phanso& a)
{
	phanso x = *this - a;
	if (*x.tu <= 0 && *x.mau <= 0 || *x.tu >= 0 && *x.mau >= 0)
		return true;
	else
	{
		return false;
	}
}
bool phanso::operator<=(const phanso& a)
{
	phanso x = *this - a;
	if (*x.tu <= 0 && *x.mau >= 0 || *x.tu >= 0 && *x.mau <= 0)
		return true;
	else
	{
		return false;
	}
}
phanso& phanso::operator++()
{
	*this->tu = *this->tu + *this->mau;
	return *this;
}

phanso& phanso::operator--()
{
	*this->tu = *this->tu - *this->mau;
	return *this;

}
phanso phanso::operator++(int x)
{
	phanso kq = *this;
	*this->tu = *this->tu + *this->mau;
	return kq;
}
phanso phanso::operator--(int x)
{
	phanso kq = *this;
	*this->tu = *this->tu - *this->mau;
	return kq;

}
void phanso::Xuat()
{
	int a = *this->tu;
	int b = *this->mau;
	if (b == 0)
	{
		cout << "mau = 0";
	}
	if (a % b == 0)
	{ 
		cout << a / b;
	}
	else
	{
		cout << a << "/" << b;
	}
}

istream& operator>>(istream& is, phanso& ps)
{
	// TODO: insert return statement here
	cout << "Nhap tu so: ";
	is >> *ps.tu;
	cout << "Nhap mau so: ";
	is >> *ps.mau;
	while (*ps.mau == 0)
	{
		cout << "Nhap lai mau so: ";
		is >> *ps.mau;
	}
	return is;
}

ostream& operator<<(ostream& os, const phanso& ps)
{
	os << *ps.tu << "/" << *ps.mau;
	return os;
}

File Source

#include <iostream>
#include "phanso.h"

using namespace std;

int main()
{
    phanso a(1, 2), b(2, 2), c;
    c = a; 
    c.Xuat();
    cout << "\n\t\t + - * / \t\t\n";
    c = a + b; 
    c.Xuat(); 
    cout << "\n";
    c = a - b; 
    c.Xuat(); cout << "\n";
    c = a * b; 
    c.Xuat(); 
    cout << " \n";
    c = a / b; 
    c.Xuat(); 
    cout << "\n ";
    cout << "\n\t\t +=  -=  *=  /= \t\t\n";
    c = a += b; c.Rutgon(); c.Xuat(); cout << "\n";
    c = a -= b; c.Rutgon(); c.Xuat(); cout << "\n";
    c = a *= b; c.Rutgon(); c.Xuat(); cout << "\n";
    c = a /= b; c.Rutgon(); c.Xuat(); cout << "\n";

    cout << "\n\t\t == < >  <=  >= != \t\t\n\n";

    cout << "a == b" << endl;
    if (a == b) { cout << " true "; }
    else { cout << " false "; }

    cout << "\na < b" << endl;
    if (a < b){ cout << " true "; }
    else { cout << " false "; }

    cout << "\na > b" << endl;
    if (a > b) { cout << " true "; }
    else { cout << " false "; }

    cout << "\na <= b" << endl;
    if (a <= b) { cout << " true "; }
    else { cout << " false "; }

    cout << "\na >= b" << endl;
    if (a >= b) { cout << " true "; }
    else { cout << " false "; }

    cout << "\na != b" << endl;
    if (a != b) { cout << " true "; }
    else { cout << " false "; }

    cout << "\n\t\t  ++  --   \t\t\n";
    c = a++;c.Rutgon(); c.Xuat(); cout << " \n ";
    c = ++a;c.Rutgon(); c.Xuat(); cout << " \n ";
    c = a--;c.Rutgon(); c.Xuat(); cout << " \n ";
    c = --a;c.Rutgon(); c.Xuat(); cout << " \n ";

    cout << "\n\n\t\t IS OS \t\t\n\n";
    cin >> c;
    cout << c;
	

}
